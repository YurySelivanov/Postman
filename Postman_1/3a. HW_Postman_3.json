{
	"info": {
		"_postman_id": "2e06754c-28c6-4ebd-b6c4-8694729e6d40",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15608304"
	},
	"item": [
		{
			"name": "task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. \r",
							"// Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. \r",
							"// Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! \r",
							"// Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в \r",
							"\r",
							"// 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД \r",
							"// (200 - позитивное значение, не 200 - негативное). \r",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. \r",
							"// У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. \r",
							"// Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"\r",
							"const age = pm.iterationData.get('age');\r",
							"const name = pm.iterationData.get('name');\r",
							"const salary = pm.iterationData.get('salary');\r",
							"\r",
							"function ageValidation (value) {\r",
							"    return value && !isNaN(value) && value >17 && value < 121 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function salaryValidation (value) {\r",
							"     return value && !isNaN(value) && value >0 && value < 1000001 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function nameValidation (value) {\r",
							"    return value && value.length > 2 && value.length < 41 && value.trim() === value\r",
							"}\r",
							"\r",
							"function validate (age, name, salary) {\r",
							"    return salaryValidation(salary) && ageValidation(age) && nameValidation(name)\r",
							"}\r",
							"\r",
							"if (validate (age, name, salary)) {\r",
							"    pm.test(`200 code with age == ${age}, salary == ${salary}, name == ${name}`, () => {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"} else {\r",
							"      pm.test(`NOT 200 code with age == ${age}, salary == ${salary}, name == ${name}`, () => {\r",
							"        pm.response.to.not.have.status(200)\r",
							"})\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"// (12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.))\r",
							"\r",
							"const salary_resp = pm.response.json().salary\r",
							"const salary_req = +pm.request.url.query.get('salary')\r",
							"\r",
							"salary_resp.forEach ((salary, index) => {\r",
							"    pm.test(`${salary_req} * ${index+1} = ${salary}`, () => {\r",
							"        pm.expect(salary_req*(index+1)).to.eql(+salary);\r",
							"        });\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yury&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yury"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"//  (5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.))\r",
							"\r",
							"\r",
							"const req = pm.request.url.query.toObject()\r",
							"const resp = {\r",
							"    age:String(pm.response.json().age),\r",
							"    name:String(pm.response.json().name),\r",
							"    salary:String(pm.response.json().salary)\r",
							"}\r",
							"\r",
							"pm.test(`Compare request object and response object`, () => {\r",
							"    pm.expect(req).to.deep.eql(resp)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yury&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yury"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле \r",
							"// (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"const key = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_3.5_years', 'qa_salary_after_1.5_year', 'qa_salary_after_12_months', 'person']\r",
							"\r",
							"let resp = pm.response.json()\r",
							"\r",
							"key.forEach (params => {\r",
							"    pm.test(`Response has ${params}`, () => {\r",
							"        pm.expect(resp).to.have.property(params)\r",
							"    })\r",
							"})\r",
							"\r",
							"// Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле \r",
							"// (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"const salary_req = pm.environment.get('salary')\r",
							"const counters = {\r",
							"    \"start_qa_salary\" : 1,\r",
							"    \"qa_salary_after_6_months\" : 2,\r",
							"    \"qa_salary_after_12_months\" : 2.7,\r",
							"    \"qa_salary_after_1.5_year\" : 3.3,\r",
							"    \"qa_salary_after_3.5_years\" : 3.8\r",
							"}\r",
							"\r",
							"for (const key in counters) {\r",
							"    pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"        pm.expect(+resp[key]).to.eql(salary_req * counters[key])\r",
							"    })\r",
							"}\r",
							"\r",
							"// Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"counters['person'] = ''\r",
							"\r",
							"for(const key in counters) {\r",
							"     pm.test(`Response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"\r",
							"    if (key != 'person') {\r",
							"        pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {\r",
							"        pm.expect(+resp[key]).to.eql(salary_req * counters[key])\r",
							"    })\r",
							"}\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}