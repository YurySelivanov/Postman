{
	"info": {
		"_postman_id": "5fe6d586-6c22-418f-ab6a-35bd10da5f82",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15608304"
	},
	"item": [
		{
			"name": "fitst",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_res = resp.name\r",
							"pm.test(\"Check_name\", function () {\r",
							"     pm.expect(name_res).to.eql(\"Yury\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_res = resp.age\r",
							"pm.test(\"Check_age\", function () {\r",
							"     pm.expect(age_res).to.eql(\"35\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_res = resp.salary\r",
							"pm.test(\"Check_salary\", function () {\r",
							"     pm.expect(salary_res).to.eql(3000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_req = req.name\r",
							"pm.test(\"Check_name\", function () {\r",
							"     pm.expect(name_res).to.eql(name_req);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_req = req.age\r",
							"pm.test(\"Check_age\", function () {\r",
							"     pm.expect(age_res).to.eql(age_req);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_req = req.salary\r",
							"salary_req = Number(salary_res)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"     pm.expect(salary_res).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family_res = resp.family\r",
							"console.log (family_res)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = resp.family.u_salary_1_5_year\r",
							"pm.test(\"Salary_1.5\", function () {\r",
							"        pm.expect(u_salary_1_5_year).to.eql(salary_req*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Yury",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_resp = resp.name\r",
							"let name_req = req.name\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"       pm.expect(name_resp).to.eql(name_req);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_resp = resp.age\r",
							"let age_req = req.age\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"       pm.expect(age_resp).to.eql(age_req);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_resp = resp.salary\r",
							"let salary_req = req.salary\r",
							"salary_req = Number(salary_resp)\r",
							"\r",
							"pm.test(\"Check_salary\", function () {\r",
							"        pm.expect(salary_resp).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family_resp = resp.family\r",
							"console.log(family_resp)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let name_dog = resp.family.pets.dog\r",
							"pm.test(\"Check_dog_name\", function () {\r",
							"    pm.expect(name_dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"let age_dog = resp.family.pets.dog\r",
							"pm.test(\"Check_dog_age\", function () {\r",
							"    pm.expect(age_dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"let name_Luky = resp.family.pets.dog.name\r",
							"pm.test(\"Check_dog_name_Luky\", function () {\r",
							"    pm.expect(name_Luky).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let age_4 = resp.family.pets.dog.age\r",
							"pm.test(\"Check_dog_age_4\", function () {\r",
							"    pm.expect(age_4).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yury&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yury"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_resp = resp.name\r",
							"let name_req = req.name\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"       pm.expect(name_resp).to.eql(name_req);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_resp = resp.age\r",
							"let age_req = req.age\r",
							"age_req = Number(age_resp)\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"       pm.expect(age_resp).to.eql(age_req);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let salary_req = req.salary\r",
							"console.log(salary_req)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let salary_resp = resp.salary\r",
							"console.log(salary_resp)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary_resp[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_resp[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_resp[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_0_el\", function () {\r",
							"      pm.expect(salary_resp[0]).to.eql(Number(salary_req));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_1_el\", function () {\r",
							"      pm.expect(Number(salary_resp[1])).to.eql(salary_req*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_2_el\", function () {\r",
							"      pm.expect(Number(salary_resp[2])).to.eql(salary_req*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\")\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",  name_resp)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",  age_resp)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",  salary_resp[0])\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for  (let i = 0; i < salary_resp.length; i++) {\r",
							"    console.log(salary_resp[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yury&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yury"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json\r",
							"let resp = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"CHECK PARAM_start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"CHECK PARAM_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"CHECK PARAM_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"CHECK PARAM_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"CHECK PARAM_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"CHECK PARAM_person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_qa_salary_resp = resp.start_qa_salary\r",
							"let salary_req = req.salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"        pm.expect(start_qa_salary_resp).to.eql(Number(salary_req));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_after_6_months_resp = resp.qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"        pm.expect(qa_salary_after_6_months_resp).to.eql(Number(salary_req*2));\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months_resp = resp.qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"        pm.expect(qa_salary_after_12_months_resp).to.eql(Number(salary_req*2.7));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let qa_salary_after_1_5_year_resp = resp['qa_salary_after_1.5_year']\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(qa_salary_after_1_5_year_resp).to.eql(Number(salary_req*3.3));\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_3_5_years_resp = resp['qa_salary_after_3.5_years']\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(qa_salary_after_3_5_years_resp).to.eql(Number(salary_req*3.8));\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let first_element_u_name = resp.person.u_name\r",
							"\r",
							"pm.test(\"first_element_u_name\", function () {\r",
							"       pm.expect(first_element_u_name[1]).to.eql(Number(salary_req));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"let element_u_age = resp.person.u_age\r",
							"let age_req = req.age\r",
							"\r",
							"pm.test(\"element_u_age\", function () {\r",
							"       pm.expect(element_u_age).to.eql(Number(age_req));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_salary_5_years = resp.person.u_salary_5_years\r",
							"\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    pm.expect(u_salary_5_years).to.eql(salary_req*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person_for = resp.person\r",
							"\r",
							"for (let person in person_for) {\r",
							"  console.log(person + \" = \" + person_for[[person]]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}